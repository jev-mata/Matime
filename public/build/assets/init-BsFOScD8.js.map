{"version":3,"file":"init-BsFOScD8.js","sources":["../../../resources/js/utils/useTags.ts","../../../resources/js/utils/useTimeEntries.ts","../../../resources/js/utils/useCurrentTimeEntry.ts","../../../resources/js/utils/init.ts"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport type { Tag } from '@/packages/api/src';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { api } from '@/packages/api/src';\nimport { useNotificationsStore } from '@/utils/notification';\n\nexport const useTagsStore = defineStore('tags', () => {\n    const tags = ref<Tag[]>([]);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n    async function fetchTags() {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.getTags({\n                        params: {\n                            organization: organizationId,\n                        },\n                    }),\n                undefined,\n                'Failed to fetch tags'\n            );\n            if (response?.data) {\n                tags.value = response.data;\n            }\n        } else {\n            throw new Error(\n                'Failed to fetch current tags because organization ID is missing.'\n            );\n        }\n    }\n\n    async function deleteTag(tagId: string) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteTag(undefined, {\n                        params: {\n                            organization: organizationId,\n                            tag: tagId,\n                        },\n                    }),\n                'Tag deleted successfully',\n                'Failed to delete tag'\n            );\n            await fetchTags();\n        }\n    }\n\n    async function createTag(name: string) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.createTag(\n                        {\n                            name: name,\n                        },\n                        {\n                            params: {\n                                organization: organizationId,\n                            },\n                        }\n                    ),\n                'Tag created successfully',\n                'Failed to create tag'\n            );\n            if (response?.data) {\n                tags.value.unshift(response.data);\n                return response.data;\n            }\n        } else {\n            throw new Error(\n                'Failed to create tag because organization ID is missing.'\n            );\n        }\n    }\n\n    return { tags, fetchTags, createTag, deleteTag };\n});\n","import { defineStore } from 'pinia';\nimport {\n    getCurrentMembershipId,\n    getCurrentOrganizationId,\n} from '@/utils/useUser';\n\nimport { reactive, ref } from 'vue';\nimport {\n    api,\n    type CreateTimeEntryBody,\n    type TimeEntriesQueryParams,\n    type TimeEntry,\n} from '@/packages/api/src';\nimport dayjs from 'dayjs';\nimport { useNotificationsStore } from '@/utils/notification';\nimport type { UpdateMultipleTimeEntriesChangeset } from '@/packages/api/src';\nimport { useQueryClient } from \"@tanstack/vue-query\";\n\nexport const useTimeEntriesStore = defineStore('timeEntries', () => {\n    const timeEntries = ref<TimeEntry[]>(reactive([]));\n\n    const allTimeEntriesLoaded = ref(false);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    const queryClient = useQueryClient();\n\n    async function patchTimeEntries(\n        queryParams: TimeEntriesQueryParams = {\n            only_full_dates: 'true',\n            member_id: getCurrentMembershipId(),\n        }\n    ) {\n        const organizationId = getCurrentOrganizationId();\n\n        if (organizationId) {\n            const timeEntriesResponse = await handleApiRequestNotifications(\n                () =>\n                    api.getTimeEntries({\n                        params: { \n                            organization: organizationId,\n                        },\n                        queries: queryParams,\n                    }),\n                undefined,\n                'Failed to fetch time entries'\n            );\n            if (timeEntriesResponse?.data) {\n                // insert missing time entries\n                const missingTimeEntries = timeEntriesResponse.data.filter(\n                    (entry) => !timeEntries.value.find((e) => e.id === entry.id)\n                );\n                timeEntries.value = [\n                    ...missingTimeEntries,\n                    ...timeEntries.value,\n                ];\n            }\n        }\n    }\n\n    async function fetchTimeEntries(\n        queryParams: TimeEntriesQueryParams = {\n            only_full_dates: 'true',\n            member_id: getCurrentMembershipId(),\n        }\n    ) {\n        const organizationId = getCurrentOrganizationId();\n\n        if (organizationId) {\n            const timeEntriesResponse = await handleApiRequestNotifications(\n                () =>\n                    api.getTimeEntries({\n                        params: {\n                            organization: organizationId,\n                        },\n                        queries: queryParams,\n                    }),\n                undefined,\n                'Failed to fetch time entries'\n            );\n            if (timeEntriesResponse?.data) {\n                timeEntries.value = timeEntriesResponse.data;\n            }\n        }\n    }\n\n    async function fetchMoreTimeEntries() {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            const latestTimeEntry =\n                timeEntries.value[timeEntries.value.length - 1];\n            dayjs(latestTimeEntry.start).utc().format('YYYY-MM-DD');\n\n            const timeEntriesResponse = await handleApiRequestNotifications(\n                () =>\n                    api.getTimeEntries({\n                        params: {\n                            organization: organizationId,\n                        },\n                        queries: {\n                            only_full_dates: 'true',\n                            member_id: getCurrentMembershipId(),\n                            end: dayjs(latestTimeEntry.start).utc().format(),\n                        },\n                    }),\n                undefined,\n                'Failed to fetch time entries'\n            );\n            if (\n                timeEntriesResponse?.data &&\n                timeEntriesResponse.data.length > 0\n            ) {\n                timeEntries.value = timeEntries.value.concat(\n                    timeEntriesResponse.data\n                );\n            } else {\n                allTimeEntriesLoaded.value = true;\n            }\n        }\n    }\n\n    async function updateTimeEntries(\n        ids: string[],\n        changes: UpdateMultipleTimeEntriesChangeset\n    ) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateMultipleTimeEntries(\n                        {\n                            ids: ids,\n                            changes: changes,\n                        },\n                        {\n                            params: {\n                                organization: organizationId,\n                            },\n                        }\n                    ),\n                'Time entries updated successfully',\n                'Failed to update time entries'\n            );\n        }\n    }\n\n    async function updateTimeEntry(timeEntry: TimeEntry) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.updateTimeEntry(timeEntry, {\n                        params: {\n                            organization: organizationId,\n                            timeEntry: timeEntry.id,\n                        },\n                    }),\n                'Time entry updated successfully',\n                'Failed to update time entry'\n            );\n            timeEntries.value = timeEntries.value.map((entry) =>\n                entry.id === timeEntry.id ? response.data : entry\n            );\n            queryClient.invalidateQueries({queryKey: ['timeEntry']});\n        }\n        \n            await fetchTimeEntries();\n    }\n\n    async function createTimeEntry(\n        timeEntry: Omit<CreateTimeEntryBody, 'member_id'>\n    ) {\n        const organizationId = getCurrentOrganizationId();\n        const memberId = getCurrentMembershipId();\n        if (organizationId && memberId !== undefined) {\n            const newTimeEntry = {\n                ...timeEntry,\n                member_id: memberId,\n            } as CreateTimeEntryBody;\n            await handleApiRequestNotifications(\n                () =>\n                    api.createTimeEntry(newTimeEntry, {\n                        params: {\n                            organization: organizationId,\n                        },\n                    }),\n                'Time entry created successfully',\n                'Failed to create time entry'\n            );\n            await fetchTimeEntries();\n        }\n    }\n\n    async function deleteTimeEntry(timeEntryId: string) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteTimeEntry(undefined, {\n                        params: {\n                            organization: organizationId,\n                            timeEntry: timeEntryId,\n                        },\n                    }),\n                'Time entry deleted successfully',\n                'Failed to delete time entry'\n            );\n            await fetchTimeEntries();\n        }\n    }\n\n    async function deleteTimeEntries(timeEntries: TimeEntry[]) {\n        const organizationId = getCurrentOrganizationId();\n        const timeEntryIds = timeEntries.map((entry) => entry.id);\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteTimeEntries(undefined, {\n                        queries: {\n                            ids: timeEntryIds,\n                        },\n                        params: {\n                            organization: organizationId,\n                        },\n                    }),\n                'Time entries deleted successfully',\n                'Failed to delete time entries'\n            );\n            await fetchTimeEntries();\n        }\n    }\n\n    return {\n        timeEntries,\n        fetchTimeEntries,\n        updateTimeEntry,\n        createTimeEntry,\n        deleteTimeEntry,\n        fetchMoreTimeEntries,\n        allTimeEntriesLoaded,\n        updateTimeEntries,\n        deleteTimeEntries,\n        patchTimeEntries,\n    };\n});\n","import { defineStore } from 'pinia';\nimport { computed, reactive, ref } from 'vue';\nimport { api } from '@/packages/api/src';\nimport type { TimeEntry } from '@/packages/api/src';\nimport dayjs, { Dayjs } from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport {\n    getCurrentMembershipId,\n    getCurrentOrganizationId,\n    getCurrentUserId,\n} from '@/utils/useUser';\nimport { useLocalStorage } from '@vueuse/core';\nimport { useTimeEntriesStore } from '@/utils/useTimeEntries';\nimport { useNotificationsStore } from '@/utils/notification';\n\ndayjs.extend(utc);\n\nconst emptyTimeEntry = {\n    id: '',\n    description: '',\n    user_id: '',\n    start: '',\n    end: null,\n    duration: null,\n    task_id: null,\n    project_id: null,\n    tags: [],\n    billable: false,\n    organization_id: '',\n} as TimeEntry;\n\nexport const useCurrentTimeEntryStore = defineStore('currentTimeEntry', () => {\n    const currentTimeEntry = ref<TimeEntry>(reactive(emptyTimeEntry));\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    useLocalStorage('solidtime/current-time-entry', currentTimeEntry, {\n        deep: true,\n    });\n\n    function $reset() {\n        currentTimeEntry.value = { ...emptyTimeEntry };\n    }\n\n    const now = ref<null | Dayjs>(null);\n    const interval = ref<ReturnType<typeof setInterval> | null>(null);\n\n    function startLiveTimer() {\n        stopLiveTimer();\n        now.value = dayjs().utc();\n        interval.value = setInterval(() => {\n            now.value = dayjs().utc();\n        }, 1000);\n    }\n\n    function stopLiveTimer() {\n        if (interval.value !== null) {\n            clearInterval(interval.value);\n        }\n    }\n\n    async function fetchCurrentTimeEntry() {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            try {\n                const timeEntriesResponse = await api.getMyActiveTimeEntry({});\n                if (timeEntriesResponse?.data) {\n                    if (timeEntriesResponse.data) {\n                        currentTimeEntry.value = timeEntriesResponse.data;\n                        if (\n                            currentTimeEntry.value.start !== '' &&\n                            currentTimeEntry.value.end === null\n                        ) {\n                            startLiveTimer();\n                        }\n                    } else {\n                        currentTimeEntry.value = { ...emptyTimeEntry };\n                    }\n                }\n            } catch{\n                currentTimeEntry.value = { ...emptyTimeEntry };\n            }\n        } else {\n            throw new Error(\n                'Failed to fetch current time entry because organization ID is missing.'\n            );\n        }\n    }\n\n    async function startTimer() {\n        const organization = getCurrentOrganizationId();\n        const membership = getCurrentMembershipId();\n        if (organization && membership) {\n            const startTime =\n                currentTimeEntry.value.start !== ''\n                    ? currentTimeEntry.value.start\n                    : dayjs().utc().format();\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.createTimeEntry(\n                        {\n                            member_id: membership,\n                            start: startTime,\n                            description: currentTimeEntry.value?.description,\n                            project_id: currentTimeEntry.value?.project_id,\n                            task_id: currentTimeEntry.value?.task_id,\n                            billable: currentTimeEntry.value.billable,\n                            tags: currentTimeEntry.value?.tags,\n                        },\n                        { params: { organization: organization } }\n                    ),\n                'Timer started!'\n            );\n            if (response?.data) {\n                currentTimeEntry.value = response.data;\n            }\n        } else {\n            throw new Error(\n                'Failed to fetch current time entry because organization ID is missing.'\n            );\n        }\n    }\n\n    async function stopTimer() {\n        const user = getCurrentUserId();\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            const currentDateTime = dayjs().utc().format();\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateTimeEntry(\n                        {\n                            user_id: user,\n                            start: currentTimeEntry.value.start,\n                            end: currentDateTime,\n                        },\n                        {\n                            params: {\n                                organization: organization,\n                                timeEntry: currentTimeEntry.value.id,\n                            },\n                        }\n                    ),\n                'Timer stopped!'\n            );\n            $reset();\n        } else {\n            throw new Error(\n                'Failed to stop current timer because organization ID is missing.'\n            );\n        }\n    }\n\n    async function updateTimer() {\n        const user = getCurrentUserId();\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.updateTimeEntry(\n                        {\n                            description: currentTimeEntry.value.description,\n                            user_id: user,\n                            project_id: currentTimeEntry.value.project_id,\n                            task_id: currentTimeEntry.value.task_id,\n                            start: currentTimeEntry.value.start,\n                            billable: currentTimeEntry.value.billable,\n                            end: null,\n                            tags: currentTimeEntry.value.tags,\n                        },\n                        {\n                            params: {\n                                organization: organization,\n                                timeEntry: currentTimeEntry.value.id,\n                            },\n                        }\n                    ),\n                'Time entry updated!'\n            );\n            if (response?.data) {\n                currentTimeEntry.value = response.data;\n            }\n        } else {\n            throw new Error(\n                'Failed to fetch current time entry because organization ID is missing.'\n            );\n        }\n    }\n\n    const isActive = computed(() => {\n        if (currentTimeEntry.value) {\n            return (\n                currentTimeEntry.value.start !== '' &&\n                currentTimeEntry.value.start !== null &&\n                currentTimeEntry.value.end === null\n            );\n        }\n        return false;\n    });\n\n    async function setActiveState(newState: boolean) {\n        if (newState) {\n            startLiveTimer();\n            await startTimer();\n        } else {\n            stopLiveTimer();\n            await stopTimer();\n        }\n        useTimeEntriesStore().fetchTimeEntries();\n    }\n\n    return {\n        currentTimeEntry,\n        fetchCurrentTimeEntry,\n        updateTimer,\n        isActive,\n        startLiveTimer,\n        stopLiveTimer,\n        now,\n        setActiveState,\n    };\n});\n","import { useProjectsStore } from '@/utils/useProjects';\nimport { useTasksStore } from '@/utils/useTasks';\nimport { useTagsStore } from '@/utils/useTags';\nimport { useCurrentTimeEntryStore } from '@/utils/useCurrentTimeEntry';\nimport { useClientsStore } from '@/utils/useClients';\nimport { useMembersStore } from '@/utils/useMembers';\nimport { useTimeEntriesStore } from '@/utils/useTimeEntries';\nimport { canViewClients, canViewMembers } from '@/utils/permissions';\n\nexport function initializeStores() {\n    refreshStores();\n}\n\nexport function refreshStores() {\n    useProjectsStore().fetchProjects();\n    useTasksStore().fetchTasks();\n    useTagsStore().fetchTags();\n    useCurrentTimeEntryStore().fetchCurrentTimeEntry();\n    useTimeEntriesStore().patchTimeEntries();\n    if (canViewMembers()) {\n        useMembersStore().fetchMembers();\n    }\n    if (canViewClients()) {\n        useClientsStore().fetchClients();\n    }\n}\n"],"names":["useTagsStore","defineStore","tags","ref","handleApiRequestNotifications","useNotificationsStore","fetchTags","organizationId","getCurrentOrganizationId","response","api","deleteTag","tagId","createTag","name","useTimeEntriesStore","timeEntries","reactive","allTimeEntriesLoaded","queryClient","useQueryClient","patchTimeEntries","queryParams","getCurrentMembershipId","timeEntriesResponse","missingTimeEntries","entry","e","fetchTimeEntries","fetchMoreTimeEntries","latestTimeEntry","dayjs","updateTimeEntries","ids","changes","updateTimeEntry","timeEntry","createTimeEntry","memberId","newTimeEntry","deleteTimeEntry","timeEntryId","deleteTimeEntries","timeEntryIds","utc","emptyTimeEntry","useCurrentTimeEntryStore","currentTimeEntry","useLocalStorage","$reset","now","interval","startLiveTimer","stopLiveTimer","fetchCurrentTimeEntry","startTimer","organization","membership","startTime","_a","_b","_c","_d","stopTimer","user","getCurrentUserId","currentDateTime","updateTimer","isActive","computed","setActiveState","newState","initializeStores","refreshStores","useProjectsStore","useTasksStore","canViewMembers","useMembersStore","canViewClients","useClientsStore"],"mappings":"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"}