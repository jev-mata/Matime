{"version":3,"file":"useMembers-fKrmzvmk.js","sources":["../../../resources/js/utils/useUser.ts","../../../resources/js/utils/useProjects.ts","../../../resources/js/utils/useTasks.ts","../../../resources/js/utils/useClients.ts","../../../resources/js/utils/useMembers.ts"],"sourcesContent":["import { usePage } from '@inertiajs/vue3';\nimport type { User } from '@/types/models';\n\nconst page = usePage<{\n    auth: {\n        user: User;\n    };\n}>();\nfunction getCurrentUserId() {\n    return page.props.auth.user.id;\n}\n\nfunction getCurrentUser() {\n    return page.props.auth.user;\n}\n\nfunction getCurrentOrganizationId() {\n    return page.props.auth.user.current_team_id;\n}\n\nfunction getCurrentMembershipId() {\n    return page.props.auth.user.all_teams.find(\n        (team) => team.id === getCurrentOrganizationId()\n    )?.membership.id;\n}\n\nfunction getCurrentRole() {\n    return page.props.auth.user.all_teams.find(\n        (team) => team.id === getCurrentOrganizationId()\n    )?.membership.role;\n}\n\nexport {\n    getCurrentOrganizationId,\n    getCurrentUserId,\n    getCurrentMembershipId,\n    getCurrentRole,\n    getCurrentUser,\n};\n","import { defineStore } from 'pinia';\nimport { api } from '@/packages/api/src';\nimport { computed, ref } from 'vue';\nimport type {\n    CreateProjectBody,\n    Project,\n    ProjectResponse,\n    UpdateProjectBody,\n} from '@/packages/api/src';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { useNotificationsStore } from '@/utils/notification';\n\nexport const useProjectsStore = defineStore('projects', () => {\n    const projectResponse = ref<ProjectResponse | null>(null);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n    async function fetchProjects() {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            projectResponse.value = await handleApiRequestNotifications(\n                () =>\n                    api.getProjects({\n                        params: {\n                            organization: organization,\n                        },\n                        queries: {\n                            archived: 'all',\n                        },\n                    }),\n                undefined,\n                'Failed to fetch projects'\n            );\n        }\n    }\n\n    async function createProject(projectBody: CreateProjectBody) {\n        const organization = getCurrentOrganizationId();\n\n        if (organization) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.createProject(projectBody, {\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                'Project created successfully',\n                'Failed to create project'\n            );\n\n            await fetchProjects();\n            return response['data'];\n        }\n    }\n\n    async function deleteProject(projectId: string) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteProject(undefined, {\n                        params: {\n                            organization: organizationId,\n                            project: projectId,\n                        },\n                    }),\n                'Project deleted successfully',\n                'Failed to delete project'\n            );\n            await fetchProjects();\n        }\n    }\n\n    async function updateProject(\n        projectId: string,\n        updateProjectBody: UpdateProjectBody\n    ) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateProject(updateProjectBody, {\n                        params: {\n                            organization: organizationId,\n                            project: projectId,\n                        },\n                    }),\n                'Project updated successfully',\n                'Failed to update project'\n            );\n            await fetchProjects();\n        }\n    }\n\n    const projects = computed<Project[]>(\n        () => projectResponse.value?.data || []\n    );\n\n    return {\n        projects,\n        fetchProjects,\n        createProject,\n        deleteProject,\n        updateProject,\n    };\n});\n","import { defineStore } from 'pinia';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { api } from '@/packages/api/src';\nimport { reactive, ref } from 'vue';\nimport type { CreateTaskBody, Task, UpdateTaskBody } from '@/packages/api/src';\nimport { useNotificationsStore } from '@/utils/notification';\n\nexport const useTasksStore = defineStore('tasks', () => {\n    const tasks = ref<Task[]>(reactive([]));\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    async function fetchTasks() {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            const tasksResponse = await handleApiRequestNotifications(() =>\n                api.getTasks({\n                    params: {\n                        organization: organizationId,\n                    },\n                    queries: {\n                        done: 'all',\n                    },\n                })\n            );\n            if (tasksResponse?.data) {\n                tasks.value = tasksResponse.data;\n            }\n        }\n    }\n\n    async function updateTask(taskId: string, taskBody: UpdateTaskBody) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateTask(taskBody, {\n                        params: {\n                            task: taskId,\n                            organization: organizationId,\n                        },\n                    }),\n                'Task updated successfully',\n                'Failed to update task'\n            );\n            await fetchTasks();\n        }\n    }\n\n    async function createTask(task: CreateTaskBody) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.createTask(task, {\n                        params: {\n                            organization: organizationId,\n                        },\n                    }),\n                'Task created successfully',\n                'Failed to create task'\n            );\n            await fetchTasks();\n        }\n    }\n\n    async function deleteTask(taskId: string) {\n        const organizationId = getCurrentOrganizationId();\n        if (organizationId) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteTask(undefined, {\n                        params: {\n                            organization: organizationId,\n                            task: taskId,\n                        },\n                    }),\n                'Task deleted successfully',\n                'Failed to delete task'\n            );\n            await fetchTasks();\n        }\n    }\n\n    return {\n        tasks,\n        fetchTasks,\n        updateTask,\n        createTask,\n        deleteTask,\n    };\n});\n","import { defineStore } from 'pinia';\nimport { api } from '@/packages/api/src';\nimport { computed, ref } from 'vue';\nimport type {\n    CreateClientBody,\n    ClientIndexResponse,\n    Client,\n    UpdateClientBody,\n} from '@/packages/api/src';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { useNotificationsStore } from '@/utils/notification';\n\nexport const useClientsStore = defineStore('clients', () => {\n    const clientResponse = ref<ClientIndexResponse | null>(null);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    async function fetchClients() {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            clientResponse.value = await handleApiRequestNotifications(\n                () =>\n                    api.getClients({\n                        queries: {\n                            archived: 'all',\n                        },\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                undefined,\n                'Failed to fetch clients'\n            );\n        }\n    }\n\n    async function createClient(\n        clientBody: CreateClientBody\n    ): Promise<Client | undefined> {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            const response = await handleApiRequestNotifications(\n                () =>\n                    api.createClient(clientBody, {\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                'Client created successfully',\n                'Failed to create client'\n            );\n            await fetchClients();\n            return response?.data;\n        }\n    }\n\n    async function updateClient(\n        clientId: string,\n        clientBody: UpdateClientBody\n    ) {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateClient(clientBody, {\n                        params: {\n                            organization: organization,\n                            client: clientId,\n                        },\n                    }),\n                'Client updated successfully',\n                'Failed to update client'\n            );\n            await fetchClients();\n        }\n    }\n\n    async function deleteClient(clientId: string) {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.deleteClient(undefined, {\n                        params: {\n                            organization: organization,\n                            client: clientId,\n                        },\n                    }),\n                'Client deleted successfully',\n                'Failed to delete client'\n            );\n            await fetchClients();\n        }\n    }\n\n    const clients = computed<Client[]>(() => {\n        return clientResponse.value?.data || [];\n    });\n\n    return { clients, fetchClients, createClient, deleteClient, updateClient };\n});\n","import { defineStore } from 'pinia';\nimport { api } from '@/packages/api/src';\nimport { computed, ref } from 'vue';\nimport type {\n    Member,\n    MemberIndexResponse,\n    UpdateMemberBody,\n} from '@/packages/api/src';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { useNotificationsStore } from '@/utils/notification';\n\nexport type MemberBillableKey = 'default-rate' | 'custom-rate';\n\nexport const useMembersStore = defineStore('members', () => {\n    const membersResponse = ref<MemberIndexResponse | null>(null);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    async function fetchMembers() {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            membersResponse.value = await handleApiRequestNotifications(\n                () =>\n                    api.getMembers({\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                undefined,\n                'Failed to fetch members'\n            );\n        }\n    }\n\n    async function removeMember(membershipId: string) {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.removeMember(undefined, {\n                        params: {\n                            organization: organization,\n                            member: membershipId,\n                        },\n                    }),\n                'Member deleted successfully',\n                'Failed to delete member'\n            );\n            await fetchMembers();\n        }\n    }\n\n    async function updateMember(\n        memberId: string,\n        memberBody: UpdateMemberBody\n    ) {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateMember(memberBody, {\n                        params: {\n                            organization: organization,\n                            member: memberId,\n                        },\n                    }),\n                'Member updated successfully',\n                'Failed to update member'\n            );\n            await fetchMembers();\n        }\n    }\n\n    const members = computed<Member[]>(() => {\n        return membersResponse.value?.data || [];\n    });\n\n    return { members, fetchMembers, removeMember, updateMember };\n});\n"],"names":["page","usePage","getCurrentUserId","getCurrentUser","getCurrentOrganizationId","getCurrentMembershipId","_a","team","getCurrentRole","useProjectsStore","defineStore","projectResponse","ref","handleApiRequestNotifications","useNotificationsStore","fetchProjects","organization","api","createProject","projectBody","response","deleteProject","projectId","organizationId","updateProject","updateProjectBody","computed","useTasksStore","tasks","reactive","fetchTasks","tasksResponse","updateTask","taskId","taskBody","createTask","task","deleteTask","useClientsStore","clientResponse","fetchClients","createClient","clientBody","updateClient","clientId","deleteClient","useMembersStore","membersResponse","fetchMembers","removeMember","membershipId","updateMember","memberId","memberBody"],"mappings":"wHAGA,MAAMA,EAAOC,EAAA,EAKb,SAASC,GAAmB,CACxB,OAAOF,EAAK,MAAM,KAAK,KAAK,EAChC,CAEA,SAASG,GAAiB,CACtB,OAAOH,EAAK,MAAM,KAAK,IAC3B,CAEA,SAASI,GAA2B,CAChC,OAAOJ,EAAK,MAAM,KAAK,KAAK,eAChC,CAEA,SAASK,GAAyB,OAC9B,OAAOC,EAAAN,EAAK,MAAM,KAAK,KAAK,UAAU,KACjCO,GAASA,EAAK,KAAOH,EAAA,CAAyB,IAD5C,YAAAE,EAEJ,WAAW,EAClB,CAEA,SAASE,GAAiB,OACtB,OAAOF,EAAAN,EAAK,MAAM,KAAK,KAAK,UAAU,KACjCO,GAASA,EAAK,KAAOH,EAAA,CAAyB,IAD5C,YAAAE,EAEJ,WAAW,IAClB,CClBO,MAAMG,EAAmBC,EAAY,WAAY,IAAM,CAC1D,MAAMC,EAAkBC,EAA4B,IAAI,EAClD,CAAE,8BAAAC,CAAA,EAAkCC,EAAA,EAC1C,eAAeC,GAAgB,CAC3B,MAAMC,EAAeZ,EAAA,EACjBY,IACAL,EAAgB,MAAQ,MAAME,EAC1B,IACII,EAAI,YAAY,CACZ,OAAQ,CACJ,aAAAD,CAAA,EAEJ,QAAS,CACL,SAAU,KAAA,CACd,CACH,EACL,OACA,0BAAA,EAER,CAGJ,eAAeE,EAAcC,EAAgC,CACzD,MAAMH,EAAeZ,EAAA,EAErB,GAAIY,EAAc,CACd,MAAMI,EAAW,MAAMP,EACnB,IACII,EAAI,cAAcE,EAAa,CAC3B,OAAQ,CACJ,aAAAH,CAAA,CACJ,CACH,EACL,+BACA,0BAAA,EAGJ,aAAMD,EAAA,EACCK,EAAS,IAAM,CAC1B,CAGJ,eAAeC,EAAcC,EAAmB,CAC5C,MAAMC,EAAiBnB,EAAA,EACnBmB,IACA,MAAMV,EACF,IACII,EAAI,cAAc,OAAW,CACzB,OAAQ,CACJ,aAAcM,EACd,QAASD,CAAA,CACb,CACH,EACL,+BACA,0BAAA,EAEJ,MAAMP,EAAA,EACV,CAGJ,eAAeS,EACXF,EACAG,EACF,CACE,MAAMF,EAAiBnB,EAAA,EACnBmB,IACA,MAAMV,EACF,IACII,EAAI,cAAcQ,EAAmB,CACjC,OAAQ,CACJ,aAAcF,EACd,QAASD,CAAA,CACb,CACH,EACL,+BACA,0BAAA,EAEJ,MAAMP,EAAA,EACV,CAOJ,MAAO,CACH,SALaW,EACb,WAAM,QAAApB,EAAAK,EAAgB,QAAhB,YAAAL,EAAuB,OAAQ,CAAA,EAAC,EAKtC,cAAAS,EACA,cAAAG,EACA,cAAAG,EACA,cAAAG,CAAA,CAER,CAAC,ECjGYG,EAAgBjB,EAAY,QAAS,IAAM,CACpD,MAAMkB,EAAQhB,EAAYiB,EAAS,CAAA,CAAE,CAAC,EAChC,CAAE,8BAAAhB,CAAA,EAAkCC,EAAA,EAE1C,eAAegB,GAAa,CACxB,MAAMP,EAAiBnB,EAAA,EACvB,GAAImB,EAAgB,CAChB,MAAMQ,EAAgB,MAAMlB,EAA8B,IACtDI,EAAI,SAAS,CACT,OAAQ,CACJ,aAAcM,CAAA,EAElB,QAAS,CACL,KAAM,KAAA,CACV,CACH,CAAA,EAEDQ,GAAA,MAAAA,EAAe,OACfH,EAAM,MAAQG,EAAc,KAChC,CACJ,CAGJ,eAAeC,EAAWC,EAAgBC,EAA0B,CAChE,MAAMX,EAAiBnB,EAAA,EACnBmB,IACA,MAAMV,EACF,IACII,EAAI,WAAWiB,EAAU,CACrB,OAAQ,CACJ,KAAMD,EACN,aAAcV,CAAA,CAClB,CACH,EACL,4BACA,uBAAA,EAEJ,MAAMO,EAAA,EACV,CAGJ,eAAeK,EAAWC,EAAsB,CAC5C,MAAMb,EAAiBnB,EAAA,EACnBmB,IACA,MAAMV,EACF,IACII,EAAI,WAAWmB,EAAM,CACjB,OAAQ,CACJ,aAAcb,CAAA,CAClB,CACH,EACL,4BACA,uBAAA,EAEJ,MAAMO,EAAA,EACV,CAGJ,eAAeO,EAAWJ,EAAgB,CACtC,MAAMV,EAAiBnB,EAAA,EACnBmB,IACA,MAAMV,EACF,IACII,EAAI,WAAW,OAAW,CACtB,OAAQ,CACJ,aAAcM,EACd,KAAMU,CAAA,CACV,CACH,EACL,4BACA,uBAAA,EAEJ,MAAMH,EAAA,EACV,CAGJ,MAAO,CACH,MAAAF,EACA,WAAAE,EACA,WAAAE,EACA,WAAAG,EACA,WAAAE,CAAA,CAER,CAAC,EC9EYC,EAAkB5B,EAAY,UAAW,IAAM,CACxD,MAAM6B,EAAiB3B,EAAgC,IAAI,EACrD,CAAE,8BAAAC,CAAA,EAAkCC,EAAA,EAE1C,eAAe0B,GAAe,CAC1B,MAAMxB,EAAeZ,EAAA,EACjBY,IACAuB,EAAe,MAAQ,MAAM1B,EACzB,IACII,EAAI,WAAW,CACX,QAAS,CACL,SAAU,KAAA,EAEd,OAAQ,CACJ,aAAAD,CAAA,CACJ,CACH,EACL,OACA,yBAAA,EAER,CAGJ,eAAeyB,EACXC,EAC2B,CAC3B,MAAM1B,EAAeZ,EAAA,EACrB,GAAIY,EAAc,CACd,MAAMI,EAAW,MAAMP,EACnB,IACII,EAAI,aAAayB,EAAY,CACzB,OAAQ,CACJ,aAAA1B,CAAA,CACJ,CACH,EACL,8BACA,yBAAA,EAEJ,aAAMwB,EAAA,EACCpB,GAAA,YAAAA,EAAU,IAAA,CACrB,CAGJ,eAAeuB,EACXC,EACAF,EACF,CACE,MAAM1B,EAAeZ,EAAA,EACjBY,IACA,MAAMH,EACF,IACII,EAAI,aAAayB,EAAY,CACzB,OAAQ,CACJ,aAAA1B,EACA,OAAQ4B,CAAA,CACZ,CACH,EACL,8BACA,yBAAA,EAEJ,MAAMJ,EAAA,EACV,CAGJ,eAAeK,EAAaD,EAAkB,CAC1C,MAAM5B,EAAeZ,EAAA,EACjBY,IACA,MAAMH,EACF,IACII,EAAI,aAAa,OAAW,CACxB,OAAQ,CACJ,aAAAD,EACA,OAAQ4B,CAAA,CACZ,CACH,EACL,8BACA,yBAAA,EAEJ,MAAMJ,EAAA,EACV,CAOJ,MAAO,CAAE,QAJOd,EAAmB,IAAM,OACrC,QAAOpB,EAAAiC,EAAe,QAAf,YAAAjC,EAAsB,OAAQ,CAAA,CAAC,CACzC,EAEiB,aAAAkC,EAAc,aAAAC,EAAc,aAAAI,EAAc,aAAAF,CAAA,CAChE,CAAC,ECtFYG,EAAkBpC,EAAY,UAAW,IAAM,CACxD,MAAMqC,EAAkBnC,EAAgC,IAAI,EACtD,CAAE,8BAAAC,CAAA,EAAkCC,EAAA,EAE1C,eAAekC,GAAe,CAC1B,MAAMhC,EAAeZ,EAAA,EACjBY,IACA+B,EAAgB,MAAQ,MAAMlC,EAC1B,IACII,EAAI,WAAW,CACX,OAAQ,CACJ,aAAAD,CAAA,CACJ,CACH,EACL,OACA,yBAAA,EAER,CAGJ,eAAeiC,EAAaC,EAAsB,CAC9C,MAAMlC,EAAeZ,EAAA,EACjBY,IACA,MAAMH,EACF,IACII,EAAI,aAAa,OAAW,CACxB,OAAQ,CACJ,aAAAD,EACA,OAAQkC,CAAA,CACZ,CACH,EACL,8BACA,yBAAA,EAEJ,MAAMF,EAAA,EACV,CAGJ,eAAeG,EACXC,EACAC,EACF,CACE,MAAMrC,EAAeZ,EAAA,EACjBY,IACA,MAAMH,EACF,IACII,EAAI,aAAaoC,EAAY,CACzB,OAAQ,CACJ,aAAArC,EACA,OAAQoC,CAAA,CACZ,CACH,EACL,8BACA,yBAAA,EAEJ,MAAMJ,EAAA,EACV,CAOJ,MAAO,CAAE,QAJOtB,EAAmB,IAAM,OACrC,QAAOpB,EAAAyC,EAAgB,QAAhB,YAAAzC,EAAuB,OAAQ,CAAA,CAAC,CAC1C,EAEiB,aAAA0C,EAAc,aAAAC,EAAc,aAAAE,CAAA,CAClD,CAAC"}