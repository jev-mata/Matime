{"version":3,"file":"TimeEntryMassActionRow.vue_vue_type_script_setup_true_lang-BFf_DA-f.js","sources":["../../../resources/js/packages/ui/src/TimeEntry/TimeEntryDescriptionInput.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryRowTagDropdown.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryMoreOptionsDropdown.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryRangeSelector.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryRowDurationInput.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryRow.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryMassUpdateModal.vue","../../../resources/js/packages/ui/src/TimeEntry/TimeEntryMassActionRow.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue';\n\nconst value = defineModel();\nconst emit = defineEmits(['changed']);\n\nfunction onChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    if (target.value !== value.value) {\n        emit('changed', target.value);\n        value.value = target.value;\n    }\n}\n\nwatch(\n    () => value.value,\n    (newValue) => {\n        liveDataValue.value = newValue;\n    }\n);\n\nfunction onInput(event: Event) {\n    liveDataValue.value = (event.target as HTMLInputElement).value;\n}\n\nconst liveDataValue = ref(value.value);\n\nconst displaysPlaceholder = computed(() => {\n    return liveDataValue.value === '' || liveDataValue.value === null;\n});\n</script>\n\n<template>\n    <div\n        class=\"relative min-w-0 flex-1 text-ellipsis whitespace-nowrap overflow-hidden\">\n        <div class=\"relative text-sm font-medium min-w-0\">\n            <div\n                :class=\"[\n                    'opacity-0 h-4 text-sm whitespace-pre font-medium min-w-0 pl-3 pr-1',\n                    { 'min-w-[130px]': displaysPlaceholder },\n                ]\">\n                {{ liveDataValue }}\n            </div>\n            <input\n                data-testid=\"time_entry_description\"\n                :value=\"liveDataValue\"\n                placeholder=\"Add a description\"\n                class=\"absolute px-0 h-full min-w-0 pl-3 pr-1 left-0 top-0 w-full text-sm text-text-primary font-medium bg-transparent focus-visible:ring-0 rounded-lg border-0\"\n                @blur=\"onChange\"\n                @input=\"onInput\"\n                @keydown.enter=\"onChange\" />\n        </div>\n    </div>\n</template>\n","<script setup lang=\"ts\">\nimport TagDropdown from '@/packages/ui/src/Tag/TagDropdown.vue';\nimport { computed } from 'vue';\nimport TagBadge from '@/packages/ui/src/Tag/TagBadge.vue';\nimport type { Tag } from '@/packages/api/src';\n\nconst props = defineProps<{\n    tags: Tag[];\n    createTag: (name: string) => Promise<Tag | undefined>;\n}>();\n\nconst emit = defineEmits<{\n    changed: [model: string[]];\n}>();\n\nconst model = defineModel<string[]>({\n    default: [],\n});\n\nconst timeEntryTags = computed<Tag[]>(() => {\n    return props.tags.filter((tag) => model.value.includes(tag.id));\n});\n</script>\n<template>\n    <TagDropdown\n        v-model=\"model\"\n        :tags=\"tags\"\n        align=\"end\"\n        :create-tag\n        @changed=\"emit('changed', model)\">\n        <template #trigger>\n            <button\n                data-testid=\"time_entry_tag_dropdown\"\n                class=\"opacity-50 group-hover:opacity-100 group/dropdown focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:opacity-100 transition focus:bg-card-background-separator hover:bg-card-background-separator rounded-full flex items-center justify-center\">\n                <TagBadge\n                    :border=\"false\"\n                    size=\"large\"\n                    class=\"border-0 sm:px-1.5 text-icon-default group-focus-within/dropdown:text-text-primary\"\n                    :name=\"\n                        timeEntryTags.map((tag: Tag) => tag.name).join(', ')\n                    \"></TagBadge>\n            </button>\n        </template>\n    </TagDropdown>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport { TrashIcon } from '@heroicons/vue/20/solid';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@/Components/ui/dropdown-menu';\n\nconst emit = defineEmits<{\n    delete: [];\n}>();\n</script>\n\n<template>\n    <DropdownMenu>\n        <DropdownMenuTrigger as-child>\n            <button\n                class=\"focus-visible:outline-none focus-visible:bg-card-background rounded-full focus-visible:ring-2 focus-visible:ring-ring focus-visible:opacity-100 hover:bg-card-background group-hover:opacity-100 opacity-20 transition-opacity text-text-secondary\"\n                aria-label=\"Actions for the time entry\">\n                <svg\n                    class=\"h-8 w-8 p-1 rounded-full\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        stroke-width=\"1.5\"\n                        d=\"M12 5.92A.96.96 0 1 0 12 4a.96.96 0 0 0 0 1.92m0 7.04a.96.96 0 1 0 0-1.92a.96.96 0 0 0 0 1.92M12 20a.96.96 0 1 0 0-1.92a.96.96 0 0 0 0 1.92\" />\n                </svg>\n            </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent class=\"min-w-[150px]\" align=\"end\">\n            <DropdownMenuItem\n                data-testid=\"time_entry_delete\"\n                class=\"flex items-center space-x-3 cursor-pointer text-destructive focus:text-destructive\"\n                @click=\"emit('delete')\">\n                <TrashIcon class=\"w-5\" />\n                <span>Delete</span>\n            </DropdownMenuItem>\n        </DropdownMenuContent>\n    </DropdownMenu>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport Dropdown from '@/packages/ui/src/Input/Dropdown.vue';\nimport { defineProps, ref, inject, type ComputedRef } from 'vue';\nimport {\n    formatDateLocalized,\n    formatStartEnd,\n} from '@/packages/ui/src/utils/time';\nimport TimeRangeSelector from '@/packages/ui/src/Input/TimeRangeSelector.vue';\nimport { twMerge } from 'tailwind-merge';\nimport type { Organization } from '@/packages/api/src';\n\ndefineProps<{\n    start: string;\n    end: string | null;\n    showDate?: boolean;\n}>();\n\nconst emit = defineEmits<{\n    changed: [start: string, end: string | null];\n}>();\n\nconst open = ref(false);\nconst triggerElement = ref<HTMLButtonElement | null>(null);\n\nconst organization = inject<ComputedRef<Organization>>('organization');\n\n</script>\n\n<template>\n    <div class=\"relative\">\n        <Dropdown\n            v-model=\"open\"\n            align=\"center\"\n            :close-on-content-click=\"false\"\n            @submit=\"open = false\">\n            <template #trigger>\n                <button\n                    ref=\"triggerElement\"\n                    data-testid=\"time_entry_range_selector\"\n                    :class=\"\n                        twMerge(\n                            'text-text-secondary px-2 bg-transparent text-center hover:bg-card-background rounded-lg border border-transparent hover:border-card-border focus-visible:outline-none focus:outline-none focus-visible:ring-2 focus-visible:text-text-primary focus-visible:ring-ring focus-visible:bg-tertiary',\n                            showDate\n                                ? 'text-xs py-1.5 font-semibold'\n                                : 'text-sm py-1.5 font-medium',\n                            organization?.time_format === '12-hours' ? 'w-[160px]' : 'w-[110px]',\n                            open && 'border-card-border bg-card-background'\n                        )\n                    \">\n                    {{ formatStartEnd(start, end, organization?.time_format) }}\n                    <span v-if=\"showDate\" class=\"text-text-tertiary font-medium\"\n                        >{{ formatDateLocalized(start, organization?.date_format) }}\n                    </span>\n                </button>\n            </template>\n            <template #content>\n                <TimeRangeSelector\n                    focus\n                    :start=\"start\"\n                    :end=\"end\"\n                    @changed=\"\n                        (newStart: string, newEnd: string) =>\n                            emit('changed', newStart, newEnd)\n                    \"\n                    @close=\"open = false\">\n                </TimeRangeSelector>\n            </template>\n        </Dropdown>\n    </div>\n</template>\n\n<style></style>\n","<script setup lang=\"ts\">\nimport {\n    calculateDifference,\n    formatHumanReadableDuration,\n    parseTimeInput,\n} from '@/packages/ui/src/utils/time';\nimport { computed, defineProps, ref, inject, type ComputedRef } from 'vue';\nimport dayjs from 'dayjs';\nimport type { Organization } from '@/packages/api/src';\n\nconst organization = inject<ComputedRef<Organization>>('organization');\n\nconst organizationSettings = computed(() => ({\n    intervalFormat: organization?.value?.interval_format ?? 'hours-minutes',\n    numberFormat: organization?.value?.number_format ?? 'point',\n}));\n\nconst props = defineProps<{\n    start: string;\n    end: string | null;\n}>();\nconst emit = defineEmits<{\n    changed: [start: string, end: string | null];\n}>();\n\nconst temporaryCustomTimerEntry = ref<string>('');\nconst open = ref(false);\n\nfunction updateTimerAndStartLiveTimerUpdate() {\n    const defaultUnit =\n        organizationSettings?.value?.intervalFormat === 'decimal'\n            ? 'hours'\n            : 'minutes';\n    const { seconds } = parseTimeInput(\n        temporaryCustomTimerEntry.value,\n        defaultUnit\n    );\n    if (seconds && seconds > 0) {\n        let newEndDate = props.end;\n        let newStartDate = props.start;\n        if (props.end) {\n            // only update end for time entries that are already finished\n            newEndDate = dayjs(props.start).utc().add(seconds, 's').format();\n        } else {\n            newStartDate = dayjs().utc().subtract(seconds, 's').format();\n        }\n        emit('changed', newStartDate, newEndDate);\n    }\n    temporaryCustomTimerEntry.value = '';\n}\n\nconst currentTime = computed({\n    get() {\n        if (temporaryCustomTimerEntry.value !== '') {\n            return temporaryCustomTimerEntry.value;\n        }\n        return formatHumanReadableDuration(\n            calculateDifference(props.start, props.end),\n            organizationSettings.value.intervalFormat,\n            organizationSettings.value.numberFormat\n        );\n    },\n    // setter\n    set(newValue) {\n        if (newValue) {\n            temporaryCustomTimerEntry.value = newValue;\n        } else {\n            temporaryCustomTimerEntry.value = '';\n        }\n    },\n});\n\nfunction selectInput(event: Event) {\n    open.value = true;\n    const target = event.target as HTMLInputElement;\n    target.select();\n}\n</script>\n\n<template>\n    <input\n        v-model=\"currentTime\"\n        data-testid=\"time_entry_duration_input\"\n        name=\"Duration\"\n        class=\"text-text-primary w-[90px] px-2.5 py-1.5 bg-transparent text-right hover:bg-card-background rounded-lg border border-transparent hover:border-card-border text-sm font-semibold focus-visible:bg-tertiary focus-visible:border-transparent focus-visible:ring-2 focus-visible:ring-ring\"\n        @focus=\"selectInput\"\n        @keydown.tab=\"open = false\"\n        @blur=\"updateTimerAndStartLiveTimerUpdate\"\n        @keydown.enter=\"updateTimerAndStartLiveTimerUpdate\" />\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport MainContainer from '@/packages/ui/src/MainContainer.vue';\nimport TimeTrackerStartStop from '@/packages/ui/src/TimeTrackerStartStop.vue';\nimport TimeEntryRangeSelector from '@/packages/ui/src/TimeEntry/TimeEntryRangeSelector.vue';\nimport type {\n    Client,\n    CreateClientBody,\n    CreateProjectBody,\n    Member,\n    Project,\n    Tag,\n    Task,\n    TimeEntry,\n} from '@/packages/api/src';\nimport TimeEntryDescriptionInput from '@/packages/ui/src/TimeEntry/TimeEntryDescriptionInput.vue';\nimport TimeEntryRowTagDropdown from '@/packages/ui/src/TimeEntry/TimeEntryRowTagDropdown.vue';\nimport TimeEntryRowDurationInput from '@/packages/ui/src/TimeEntry/TimeEntryRowDurationInput.vue';\nimport TimeEntryMoreOptionsDropdown from '@/packages/ui/src/TimeEntry/TimeEntryMoreOptionsDropdown.vue';\nimport BillableToggleButton from '@/packages/ui/src/Input/BillableToggleButton.vue';\nimport { computed } from 'vue';\nimport TimeTrackerProjectTaskDropdown from '@/packages/ui/src/TimeTracker/TimeTrackerProjectTaskDropdown.vue';\nimport { Checkbox } from '@/packages/ui/src';\nimport { twMerge } from 'tailwind-merge';\n\nimport {\n    type TimeEntriesQueryParams,\n} from '@/packages/api/src';\n\nconst props = defineProps<{\n    timeEntry: TimeEntry;\n    indent?: boolean;\n    projects: Project[];\n    tasks: Task[];\n    tags: Tag[];\n    clients: Client[]; \n    members?: Member[];\n    createTag: (name: string) => Promise<Tag | undefined>;\n    createProject: (project: CreateProjectBody) => Promise<Project | undefined>;\n    createClient: (client: CreateClientBody) => Promise<Client | undefined>;\n    onStartStopClick: () => void;\n    deleteTimeEntry: () => void;\n    updateTimeEntry: (timeEntry: TimeEntry) => void;\n    currency: string;\n    showMember?: boolean;\n    showDate?: boolean;\n    selected?: boolean;\n    canCreateProject: boolean;\n    enableEstimatedTime: boolean;\n}>();\n\nconst emit = defineEmits<{ selected: []; unselected: [] }>();\n\nfunction updateTimeEntryDescription(description: string) {\n    props.updateTimeEntry({ ...props.timeEntry, description });\n}\n\nfunction updateTimeEntryTags(tags: string[]) {\n    props.updateTimeEntry({ ...props.timeEntry, tags });\n}\n\nfunction updateTimeEntryBillable(billable: boolean) {\n    props.updateTimeEntry({ ...props.timeEntry, billable });\n}\n\nfunction updateStartEndTime(start: string, end: string | null) {\n    props.updateTimeEntry({ ...props.timeEntry, start, end });\n}\n\nfunction updateProjectAndTask(projectId: string, taskId: string) {\n    props.updateTimeEntry({\n        ...props.timeEntry,\n        project_id: projectId,\n        task_id: taskId,\n    });\n}\n\nconst memberName = computed(() => {\n    if (props.members) {\n        const member = props.members.find(\n            (member) => member.user_id === props.timeEntry.user_id\n        );\n        if (member) {\n            return member.name;\n        }\n    }\n    return '';\n});\n\nfunction onSelectChange(checked : boolean) {\n    if (checked) {\n        emit('selected');\n    } else {\n        emit('unselected');\n    }\n}\n</script>\n\n<template>\n    <div\n        class=\"border-b border-default-background-separator transition min-w-0 bg-row-background\"\n        data-testid=\"time_entry_row\">\n        <MainContainer class=\"min-w-0\">\n            <div\n                class=\"sm:flex py-2 min-w-0 items-center justify-between group\">\n                <div class=\"flex items-center min-w-0\">\n                    <Checkbox\n                        :checked=\"selected\"\n                        @update:checked=\"onSelectChange\" />\n                    <div v-if=\"indent === true\" class=\"w-10 h-7\"></div>\n                    <TimeEntryDescriptionInput\n                        class=\"min-w-0 mr-4\"\n                        :model-value=\"\n                            timeEntry.description\n                        \"\n                        @changed=\"updateTimeEntryDescription\"></TimeEntryDescriptionInput>\n                    <TimeTrackerProjectTaskDropdown\n                        :create-project\n                        :create-client\n                        :can-create-project\n                        :clients\n                        :projects=\"projects\"\n                        :tasks=\"tasks\"\n                        :show-badge-border=\"false\"\n                        :project=\"timeEntry.project_id\"\n                        :currency=\"currency\"\n                        :enable-estimated-time\n                        :task=\"\n                            timeEntry.task_id\n                        \"\n                        @changed=\"updateProjectAndTask\"></TimeTrackerProjectTaskDropdown>\n                </div>\n                <div\n                    class=\"flex items-center font-medium space-x-1 lg:space-x-2\">\n                    <div v-if=\"showMember && members\" class=\"text-sm px-2\">\n                        {{ memberName }}\n                    </div>\n                    <TimeEntryRowTagDropdown\n                        :create-tag\n                        :tags=\"tags\"\n                        :model-value=\"timeEntry.tags\"\n                        @changed=\"updateTimeEntryTags\"></TimeEntryRowTagDropdown>\n                    <BillableToggleButton\n                        :model-value=\"timeEntry.billable\"\n                        :class=\"twMerge('opacity-50 group-hover:opacity-100 focus-visible:opacity-100')\"\n                        size=\"small\"\n                        @changed=\"\n                            updateTimeEntryBillable\n                        \"></BillableToggleButton>\n                    <div class=\"flex-1\">\n                        <TimeEntryRangeSelector\n                            class=\"hidden lg:block\"\n                            :start=\"timeEntry.start\"\n                            :end=\"timeEntry.end\"\n                            :show-date\n                            @changed=\"\n                                updateStartEndTime\n                            \"></TimeEntryRangeSelector>\n                    </div>\n                    <TimeEntryRowDurationInput\n                        :start=\"timeEntry.start\"\n                        :end=\"timeEntry.end\"\n                        @changed=\"\n                            updateStartEndTime\n                        \"></TimeEntryRowDurationInput>\n                    <TimeTrackerStartStop\n                        :active=\"!!(timeEntry.start && !timeEntry.end)\"\n                        class=\"opacity-20 hidden sm:flex focus-visible:opacity-100 group-hover:opacity-100\"\n                        @changed=\"onStartStopClick\"></TimeTrackerStartStop>\n                    <TimeEntryMoreOptionsDropdown\n                        @delete=\"\n                            deleteTimeEntry\n                        \"></TimeEntryMoreOptionsDropdown>\n                </div>\n            </div>\n        </MainContainer>\n    </div>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport TextInput from '../Input/TextInput.vue';\nimport SecondaryButton from '../Buttons/SecondaryButton.vue';\nimport DialogModal from '@/packages/ui/src/DialogModal.vue';\nimport { computed, nextTick, ref, watch } from 'vue';\nimport PrimaryButton from '../Buttons/PrimaryButton.vue';\nimport TimeTrackerProjectTaskDropdown from '@/packages/ui/src/TimeTracker/TimeTrackerProjectTaskDropdown.vue';\nimport InputLabel from '../Input/InputLabel.vue';\nimport {\n    type CreateClientBody,\n    type CreateProjectBody,\n    type Project,\n    type Client,\n    type TimeEntry,\n    type UpdateMultipleTimeEntriesChangeset,\n} from '@/packages/api/src';\nimport { Badge, Checkbox } from '@/packages/ui/src';\nimport SelectDropdown from '../Input/SelectDropdown.vue';\nimport TagDropdown from '@/packages/ui/src/Tag/TagDropdown.vue';\nimport type { Tag, Task } from '@/packages/api/src';\n\nconst show = defineModel('show', { default: false });\nconst saving = ref(false);\n\nconst props = defineProps<{\n    timeEntries: TimeEntry[];\n    projects: Project[];\n    tasks: Task[];\n    clients: Client[];\n    tags: Tag[];\n    createProject: (project: CreateProjectBody) => Promise<Project | undefined>;\n    createClient: (client: CreateClientBody) => Promise<Client | undefined>;\n    createTag: (name: string) => Promise<Tag | undefined>;\n    updateTimeEntries: (\n        changeset: UpdateMultipleTimeEntriesChangeset\n    ) => Promise<void>;\n    currency: string;\n    enableEstimatedTime: boolean;\n    canCreateProject: boolean;\n}>();\n\nconst emit = defineEmits<{\n    submit: [];\n}>();\n\nconst descriptionInput = ref<HTMLInputElement | null>(null);\n\nwatch(show, (value) => {\n    if (value) {\n        nextTick(() => {\n            descriptionInput.value?.focus();\n        });\n    }\n});\n\nconst description = ref<string>('');\nconst taskId = ref<string | null | undefined>(undefined);\nconst projectId = ref<string | null>(null);\nconst billable = ref<boolean | undefined>(undefined);\nconst selectedTags = ref<string[]>([]);\n\nconst timeEntryBillable = computed({\n    get: () => {\n        if (billable.value === undefined) {\n            return 'do-not-update';\n        }\n        return billable.value ? 'billable' : 'non-billable';\n    },\n    set: (value) => {\n        if (value === 'do-not-update') {\n            billable.value = undefined;\n        } else if (value === 'billable') {\n            billable.value = true;\n        } else {\n            billable.value = false;\n        }\n    },\n});\n\nasync function submit() {\n    saving.value = true;\n    const timeEntryUpdatesBody = {} as UpdateMultipleTimeEntriesChangeset;\n    if (description.value && description.value !== '') {\n        timeEntryUpdatesBody.description = description.value;\n    }\n    if (projectId.value !== null) {\n        if (projectId.value === '') {\n            // \"No Project\" is selected\n            timeEntryUpdatesBody.project_id = null;\n        } else {\n            timeEntryUpdatesBody.project_id = projectId.value;\n        }\n        timeEntryUpdatesBody.task_id = null;\n        if (taskId.value !== undefined) {\n            timeEntryUpdatesBody.task_id = taskId.value;\n        }\n    }\n\n    if (billable.value !== undefined) {\n        timeEntryUpdatesBody.billable = billable.value;\n    }\n    if (selectedTags.value.length > 0) {\n        timeEntryUpdatesBody.tags = selectedTags.value;\n    }\n    if (removeAllTags.value) {\n        timeEntryUpdatesBody.tags = [];\n    }\n\n    try {\n        await props.updateTimeEntries({ ...timeEntryUpdatesBody });\n\n        show.value = false;\n        emit('submit');\n        description.value = '';\n        projectId.value = null;\n        taskId.value = undefined;\n        selectedTags.value = [];\n        billable.value = undefined;\n        saving.value = false;\n        removeAllTags.value = false;\n    } catch {\n        saving.value = false;\n    }\n}\nconst removeAllTags = ref(false);\nwatch(removeAllTags, () => {\n    if (removeAllTags.value) {\n        selectedTags.value = [];\n    }\n});\ntype SelectOption = { label: string; value: string };\n</script>\n\n<template>\n    <DialogModal closeable :show=\"show\" @close=\"show = false\">\n        <template #title>\n            <div class=\"flex space-x-2\">\n                <span> Update {{ timeEntries.length }} time entries </span>\n            </div>\n        </template>\n\n        <template #content>\n            <div class=\"space-y-4\">\n                <div class=\"space-y-2\">\n                    <InputLabel for=\"description\" value=\"Description\" />\n                    <TextInput\n                        id=\"description\"\n                        ref=\"descriptionInput\"\n                        v-model=\"description\"\n                        type=\"text\"\n                        class=\"mt-1 block w-full\"\n                        @keydown.enter=\"submit\" />\n                </div>\n                <div class=\"space-y-2\">\n                    <InputLabel for=\"project\" value=\"Project\" />\n                    <TimeTrackerProjectTaskDropdown\n                        v-model:project=\"projectId\"\n                        v-model:task=\"taskId\"\n                        :clients\n                        :create-project\n                        :create-client\n                        :currency=\"currency\"\n                        :can-create-project\n                        class=\"mt-1\"\n                        empty-placeholder=\"Select project...\"\n                        allow-reset\n                        size=\"xlarge\"\n                        :enable-estimated-time\n                        :projects=\"projects\"\n                        :tasks=\"tasks\"></TimeTrackerProjectTaskDropdown>\n                </div>\n                <div class=\"space-y-2\">\n                    <InputLabel for=\"project\" value=\"Tag\" />\n                    <div class=\"flex space-x-5\">\n                        <TagDropdown\n                            v-model=\"selectedTags\"\n                            :create-tag\n                            :tags=\"tags\">\n                            <template #trigger>\n                                <Badge\n                                    :disabled=\"removeAllTags\"\n                                    tag=\"button\"\n                                    size=\"xlarge\">\n                                    <span v-if=\"selectedTags.length > 0\">\n                                        Set {{ selectedTags.length }} tags\n                                    </span>\n                                    <span v-else> Select Tags... </span>\n                                </Badge>\n                            </template>\n                        </TagDropdown>\n                        <div class=\"flex items-center space-x-2\">\n                            <Checkbox\n                                id=\"no_tags\"\n                                v-model:checked=\"removeAllTags\"></Checkbox>\n                            <InputLabel for=\"no_tags\" value=\"Remove all tags\" />\n                        </div>\n                    </div>\n                </div>\n                <div class=\"space-y-2\">\n                    <InputLabel for=\"project\" value=\"Billable\" />\n                    <div class=\"flex\">\n                        <SelectDropdown\n                            v-model=\"timeEntryBillable\"\n                            :get-key-from-item=\"\n                                (item: SelectOption) => item.value\n                            \"\n                            :get-name-for-item=\"\n                                (item: SelectOption) => item.label\n                            \"\n                            :items=\"[\n                                {\n                                    label: 'Keep current billable status',\n                                    value: 'do-not-update',\n                                },\n                                {\n                                    label: 'Billable',\n                                    value: 'billable',\n                                },\n                                {\n                                    label: 'Non Billable',\n                                    value: 'non-billable',\n                                },\n                            ]\">\n                            <template #trigger>\n                                <Badge tag=\"button\" size=\"xlarge\">\n                                    <span v-if=\"billable === undefined\">\n                                        Set billable status\n                                    </span>\n                                    <span v-else-if=\"billable === true\">\n                                        Billable\n                                    </span>\n                                    <span v-else> Non Billable </span></Badge\n                                >\n                            </template>\n                        </SelectDropdown>\n                    </div>\n                </div>\n            </div>\n        </template>\n        <template #footer>\n            <SecondaryButton @click=\"show = false\"> Cancel</SecondaryButton>\n            <PrimaryButton\n                class=\"ms-3\"\n                :class=\"{ 'opacity-25': saving }\"\n                :disabled=\"saving\"\n                @click=\"submit\">\n                Update Time Entries\n            </PrimaryButton>\n        </template>\n    </DialogModal>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport MainContainer from '@/packages/ui/src/MainContainer.vue';\nimport { PencilSquareIcon, TrashIcon } from '@heroicons/vue/20/solid';\nimport TimeEntryMassUpdateModal from '@/packages/ui/src/TimeEntry/TimeEntryMassUpdateModal.vue';\nimport type {\n    Client,\n    CreateClientBody,\n    CreateProjectBody,\n    Project,\n    Tag,\n    Task,\n    TimeEntry,\n    UpdateMultipleTimeEntriesChangeset,\n} from '@/packages/api/src';\nimport { ref } from 'vue';\nimport { twMerge } from 'tailwind-merge';\nimport { Checkbox, InputLabel } from '@/packages/ui/src';\n\nconst props = defineProps<{\n    selectedTimeEntries: TimeEntry[];\n    deleteSelected: () => void;\n    class?: string;\n    allSelected: boolean;\n    projects: Project[];\n    tasks: Task[];\n    tags: Tag[];\n    clients: Client[];\n    createTag: (name: string) => Promise<Tag | undefined>;\n    createProject: (project: CreateProjectBody) => Promise<Project | undefined>;\n    createClient: (client: CreateClientBody) => Promise<Client | undefined>;\n    updateTimeEntries: (\n        changeset: UpdateMultipleTimeEntriesChangeset\n    ) => Promise<void>;\n    currency: string;\n    enableEstimatedTime: boolean;\n    canCreateProject: boolean;\n}>();\n\nconst emit = defineEmits<{\n    submit: [];\n    selectAll: [];\n    unselectAll: [];\n}>();\n\nconst showMassUpdateModal = ref(false);\n</script>\n\n<template>\n    <TimeEntryMassUpdateModal\n        v-model:show=\"showMassUpdateModal\"\n        :projects\n        :tasks\n        :tags\n        :clients\n        :create-tag\n        :create-project\n        :create-client\n        :update-time-entries\n        :enable-estimated-time\n        :can-create-project\n        :currency\n        :time-entries=\"selectedTimeEntries\"\n        @submit=\"emit('submit')\"></TimeEntryMassUpdateModal>\n    <MainContainer\n        :class=\"\n            twMerge(\n                props.class,\n                'text-sm py-1.5 font-medium border-t border-b bg-secondary border-border-secondary flex items-center space-x-3'\n            )\n        \">\n        <Checkbox\n            id=\"selectAll\"\n            :checked=\"allSelected\"\n            @update:checked=\"\n                allSelected ? emit('unselectAll') : emit('selectAll')\n            \">\n        </Checkbox>\n        <InputLabel\n            v-if=\"selectedTimeEntries.length > 0\"\n            for=\"selectAll\"\n            class=\"select-none text-text-secondary\">\n            {{ selectedTimeEntries.length }} selected\n        </InputLabel>\n        <InputLabel\n            v-else\n            for=\"selectAll\"\n            class=\"text-text-secondary select-none\"\n            >Select All</InputLabel\n        >\n        <button\n            v-if=\"selectedTimeEntries.length\"\n            class=\"text-text-tertiary flex space-x-1 items-center hover:text-text-secondary transition focus-visible:ring-2 outline-0 focus-visible:text-text-primary focus-visible:ring-ring rounded h-full px-2\"\n            @click=\"showMassUpdateModal = true\">\n            <PencilSquareIcon class=\"w-4\"></PencilSquareIcon>\n            <span> Edit </span>\n        </button>\n        <button\n            v-if=\"selectedTimeEntries.length\"\n            class=\"text-red-400 h-full px-2 space-x-1 items-center flex hover:text-red-500 transition focus-visible:ring-2 outline-0 focus-visible:text-red-500 focus-visible:ring-ring rounded\"\n            @click=\"deleteSelected\">\n            <TrashIcon class=\"w-3.5\"></TrashIcon>\n            <span> Delete </span>\n        </button>\n    </MainContainer>\n</template>\n\n<style scoped></style>\n"],"names":["value","_useModel","emit","__emit","onChange","event","target","watch","newValue","liveDataValue","onInput","ref","displaysPlaceholder","computed","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_normalizeClass","props","__props","model","timeEntryTags","tag","_createBlock","TagDropdown","$event","tags","createTag","_cache","_createVNode","TagBadge","_unref","DropdownMenu","DropdownMenuTrigger","DropdownMenuContent","DropdownMenuItem","TrashIcon","open","triggerElement","organization","inject","Dropdown","twMerge","showDate","formatStartEnd","start","end","_toDisplayString","formatDateLocalized","TimeRangeSelector","newStart","newEnd","organizationSettings","_a","_b","temporaryCustomTimerEntry","updateTimerAndStartLiveTimerUpdate","defaultUnit","seconds","parseTimeInput","newEndDate","newStartDate","dayjs","currentTime","formatHumanReadableDuration","calculateDifference","selectInput","updateTimeEntryDescription","description","updateTimeEntryTags","updateTimeEntryBillable","billable","updateStartEndTime","updateProjectAndTask","projectId","taskId","memberName","member","onSelectChange","checked","MainContainer","_hoisted_3","Checkbox","selected","indent","_hoisted_4","TimeEntryDescriptionInput","timeEntry","TimeTrackerProjectTaskDropdown","createProject","createClient","canCreateProject","clients","projects","tasks","currency","enableEstimatedTime","_hoisted_5","showMember","members","_hoisted_6","TimeEntryRowTagDropdown","BillableToggleButton","_hoisted_7","TimeEntryRangeSelector","TimeEntryRowDurationInput","TimeTrackerStartStop","onStartStopClick","TimeEntryMoreOptionsDropdown","deleteTimeEntry","show","saving","descriptionInput","nextTick","selectedTags","timeEntryBillable","submit","timeEntryUpdatesBody","removeAllTags","DialogModal","timeEntries","InputLabel","TextInput","Badge","_hoisted_9","_hoisted_10","_hoisted_11","SelectDropdown","item","SecondaryButton","PrimaryButton","showMassUpdateModal","TimeEntryMassUpdateModal","updateTimeEntries","selectedTimeEntries","allSelected","PencilSquareIcon","_ctx","args"],"mappings":"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"}