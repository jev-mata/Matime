{"version":3,"file":"useOrganization-BJAvoR2D.js","sources":["../../../resources/js/utils/useOrganization.ts"],"sourcesContent":["import { router } from '@inertiajs/vue3';\nimport { initializeStores } from '@/utils/init';\nimport { defineStore } from 'pinia';\nimport { computed, ref } from 'vue';\nimport type {\n    Organization,\n    OrganizationResponse,\n    UpdateOrganizationBody,\n} from '@/packages/api/src';\nimport { useNotificationsStore } from '@/utils/notification';\nimport { getCurrentOrganizationId } from '@/utils/useUser';\nimport { api } from '@/packages/api/src';\n\nexport function switchOrganization(organizationId: string) {\n    router.put(\n        route('current-team.update'),\n        {\n            team_id: organizationId,\n        },\n        {\n            preserveState: false,\n            onSuccess: () => {\n                initializeStores();\n            },\n        }\n    );\n}\n\nexport const useOrganizationStore = defineStore('organization', () => {\n    const organizationResponse = ref<OrganizationResponse | null>(null);\n    const { handleApiRequestNotifications } = useNotificationsStore();\n\n    async function fetchOrganization() {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            organizationResponse.value = await handleApiRequestNotifications(\n                () =>\n                    api.getOrganization({\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                undefined,\n                'Failed to fetch organization'\n            );\n        }\n    }\n\n    async function updateOrganization(\n        organizationBody: UpdateOrganizationBody\n    ) {\n        const organization = getCurrentOrganizationId();\n        if (organization) {\n            await handleApiRequestNotifications(\n                () =>\n                    api.updateOrganization(organizationBody, {\n                        params: {\n                            organization: organization,\n                        },\n                    }),\n                'Organization updated successfully',\n                'Failed to update organization'\n            );\n            await fetchOrganization();\n        }\n    }\n\n    const organization = computed<Organization | null>(() => {\n        return organizationResponse.value?.data || null;\n    });\n\n    return { organization, fetchOrganization, updateOrganization };\n});\n"],"names":["switchOrganization","organizationId","router","initializeStores","useOrganizationStore","defineStore","organizationResponse","ref","handleApiRequestNotifications","useNotificationsStore","fetchOrganization","organization","getCurrentOrganizationId","api","updateOrganization","organizationBody","computed","_a"],"mappings":"qMAaO,SAASA,EAAmBC,EAAwB,CACvDC,EAAO,IACH,MAAM,qBAAqB,EAC3B,CACI,QAASD,CAAA,EAEb,CACI,cAAe,GACf,UAAW,IAAM,CACbE,EAAA,CAAiB,CACrB,CACJ,CAER,CAEO,MAAMC,EAAuBC,EAAY,eAAgB,IAAM,CAClE,MAAMC,EAAuBC,EAAiC,IAAI,EAC5D,CAAE,8BAAAC,CAAA,EAAkCC,EAAA,EAE1C,eAAeC,GAAoB,CAC/B,MAAMC,EAAeC,EAAA,EACjBD,IACAL,EAAqB,MAAQ,MAAME,EAC/B,IACIK,EAAI,gBAAgB,CAChB,OAAQ,CACJ,aAAcF,CAAA,CAClB,CACH,EACL,OACA,8BAAA,EAER,CAGJ,eAAeG,EACXC,EACF,CACE,MAAMJ,EAAeC,EAAA,EACjBD,IACA,MAAMH,EACF,IACIK,EAAI,mBAAmBE,EAAkB,CACrC,OAAQ,CACJ,aAAcJ,CAAA,CAClB,CACH,EACL,oCACA,+BAAA,EAEJ,MAAMD,EAAA,EACV,CAOJ,MAAO,CAAE,aAJYM,EAA8B,IAAM,OACrD,QAAOC,EAAAX,EAAqB,QAArB,YAAAW,EAA4B,OAAQ,IAAA,CAC9C,EAEsB,kBAAAP,EAAmB,mBAAAI,CAAA,CAC9C,CAAC"}