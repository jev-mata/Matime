{"version":3,"file":"BillableIcon-BvHKiDs7.js","sources":["../../../resources/js/packages/ui/src/utils/random.ts","../../../resources/js/packages/ui/src/utils/color.ts","../../../resources/js/packages/ui/src/Icons/BillableIcon.vue"],"sourcesContent":["/**\n * This is a hardfork of Prando, a pseudo-random number generator.\n * @source https://github.com/zeh/prando\n */\n\nexport default class Prando {\n    private static readonly MIN: number = -2147483648; // Int32 min\n    private static readonly MAX: number = 2147483647; // Int32 max\n\n    private _seed: number;\n    private _value = NaN;\n\n    // ================================================================================================================\n    // CONSTRUCTOR ----------------------------------------------------------------------------------------------------\n\n    /**\n     * Generate a new Prando pseudo-random number generator.\n     *\n     * @param seed - A number or string seed that determines which pseudo-random number sequence will be created. Defaults to a random seed based on `Math.random()`.\n     */\n    constructor(seed?: number | string) {\n        if (typeof seed === 'string') {\n            // String seed\n            this._seed = this.hashCode(seed);\n        } else if (typeof seed === 'number') {\n            // Numeric seed\n            this._seed = this.getSafeSeed(seed);\n        } else {\n            // Pseudo-random seed\n            this._seed = this.getSafeSeed(\n                Prando.MIN +\n                    Math.floor((Prando.MAX - Prando.MIN) * Math.random())\n            );\n        }\n        this.reset();\n    }\n\n    // ================================================================================================================\n    // PUBLIC INTERFACE -----------------------------------------------------------------------------------------------\n\n    /**\n     * Generates a pseudo-random number between a lower (inclusive) and a higher (exclusive) bounds.\n     *\n     * @param min - The minimum number that can be randomly generated.\n     * @param pseudoMax - The maximum number that can be randomly generated (exclusive).\n     * @return The generated pseudo-random number.\n     */\n    public next(min = 0, pseudoMax = 1): number {\n        this.recalculate();\n        return this.map(this._value, Prando.MIN, Prando.MAX, min, pseudoMax);\n    }\n\n    /**\n     * Generates a pseudo-random integer number in a range (inclusive).\n     *\n     * @param min - The minimum number that can be randomly generated.\n     * @param max - The maximum number that can be randomly generated.\n     * @return The generated pseudo-random number.\n     */\n    public nextInt(min = 10, max = 100): number {\n        this.recalculate();\n        return Math.floor(\n            this.map(this._value, Prando.MIN, Prando.MAX, min, max + 1)\n        );\n    }\n\n    /**\n     * Generates a pseudo-random string sequence of a particular length from a specific character range.\n     *\n     * Note: keep in mind that creating a random string sequence does not guarantee uniqueness; there is always a\n     * 1 in (char_length^string_length) chance of collision. For real unique string ids, always check for\n     * pre-existing ids, or employ a robust GUID/UUID generator.\n     *\n     * @param length - Length of the string to be generated.\n     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\n     * @return The generated string sequence.\n     */\n    public nextString(\n        length = 16,\n        chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    ): string {\n        let str = '';\n        while (str.length < length) {\n            str += this.nextChar(chars);\n        }\n        return str;\n    }\n\n    /**\n     * Generates a pseudo-random string of 1 character specific character range.\n     *\n     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\n     * @return The generated character.\n     */\n    public nextChar(\n        chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    ): string {\n        return chars.substr(this.nextInt(0, chars.length - 1), 1);\n    }\n\n    /**\n     * Picks a pseudo-random item from an array. The array is left unmodified.\n     *\n     * Note: keep in mind that while the returned item will be random enough, picking one item from the array at a time\n     * does not guarantee nor imply that a sequence of random non-repeating items will be picked. If you want to\n     * *pick items in a random order* from an array, instead of *pick one random item from an array*, it's best to\n     * apply a *shuffle* transformation to the array instead, then read it linearly.\n     *\n     * @param array - Array of any type containing one or more candidates for random picking.\n     * @return An item from the array.\n     */\n    public nextArrayItem<T>(array: T[]): T {\n        return array[this.nextInt(0, array.length - 1)];\n    }\n\n    /**\n     * Generates a pseudo-random boolean.\n     *\n     * @return A value of true or false.\n     */\n    public nextBoolean(): boolean {\n        this.recalculate();\n        return this._value > 0.5;\n    }\n\n    /**\n     * Skips ahead in the sequence of numbers that are being generated. This is equivalent to\n     * calling next() a specified number of times, but faster since it doesn't need to map the\n     * new random numbers to a range and return it.\n     *\n     * @param iterations - The number of items to skip ahead.\n     */\n    public skip(iterations = 1): void {\n        while (iterations-- > 0) {\n            this.recalculate();\n        }\n    }\n\n    /**\n     * Reset the pseudo-random number sequence back to its starting seed. Further calls to next()\n     * will then produce the same sequence of numbers it had produced before. This is equivalent to\n     * creating a new Prando instance with the same seed as another Prando instance.\n     *\n     * Example:\n     * let rng = new Prando(12345678);\n     * console.log(rng.next()); // 0.6177754114889017\n     * console.log(rng.next()); // 0.5784605181725837\n     * rng.reset();\n     * console.log(rng.next()); // 0.6177754114889017 again\n     * console.log(rng.next()); // 0.5784605181725837 again\n     */\n    public reset(): void {\n        this._value = this._seed;\n    }\n\n    // ================================================================================================================\n    // PRIVATE INTERFACE ----------------------------------------------------------------------------------------------\n\n    private recalculate(): void {\n        this._value = this.xorshift(this._value);\n    }\n\n    private xorshift(value: number): number {\n        // Xorshift*32\n        // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n        value ^= value << 13;\n        value ^= value >> 17;\n        value ^= value << 5;\n        return value;\n    }\n\n    private map(\n        val: number,\n        minFrom: number,\n        maxFrom: number,\n        minTo: number,\n        maxTo: number\n    ): number {\n        return (\n            ((val - minFrom) / (maxFrom - minFrom)) * (maxTo - minTo) + minTo\n        );\n    }\n\n    private hashCode(str: string): number {\n        let hash = 0;\n        if (str) {\n            const l = str.length;\n            for (let i = 0; i < l; i++) {\n                hash = (hash << 5) - hash + str.charCodeAt(i);\n                hash |= 0;\n                hash = this.xorshift(hash);\n            }\n        }\n        return this.getSafeSeed(hash);\n    }\n\n    private getSafeSeed(seed: number): number {\n        if (seed === 0) return 1;\n        return seed;\n    }\n}\n","import Prando from '@/packages/ui/src/utils/random';\n\nexport const colors = [\n    '#ef5350',\n    '#ec407a',\n    '#ab47bc',\n    '#7e57c2',\n    '#5c6bc0',\n    '#42a5f5',\n    '#29b6f6',\n    '#26c6da',\n    '#26a69a',\n    '#66bb6a',\n    '#9ccc65',\n    '#d4e157',\n    '#ffee58',\n    '#ffca28',\n    '#ffa726',\n    '#ff7043',\n    '#8d6e63',\n    '#bdbdbd',\n    '#78909c',\n];\n\nexport function getRandomColor() {\n    return colors[Math.floor(Math.random() * colors.length)];\n}\n\nexport function getRandomColorWithSeed(seed: string) {\n    const pseudoRandom = new Prando(seed);\n    const index = pseudoRandom.nextInt(0, colors.length - 1);\n    return colors[index];\n}\n","<script setup lang=\"ts\"></script>\n\n<template>\n    <svg viewBox=\"0 0 8 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M4 1V13M1 10.182L1.879 10.841C3.05 11.72 4.949 11.72 6.121 10.841C7.293 9.962 7.293 8.538 6.121 7.659C5.536 7.219 4.768 7 4 7C3.275 7 2.55 6.78 1.997 6.341C0.891 5.462 0.891 4.038 1.997 3.159C3.103 2.28 4.897 2.28 6.003 3.159L6.418 3.489\"\n            stroke=\"currentColor\"\n            stroke-width=\"1.5\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" />\n    </svg>\n</template>\n\n<style scoped></style>\n"],"names":["_Prando","seed","__publicField","min","pseudoMax","max","length","chars","str","array","iterations","value","val","minFrom","maxFrom","minTo","maxTo","hash","l","i","Prando","colors","getRandomColor","getRandomColorWithSeed","index","_openBlock","_createElementBlock","_hoisted_1","_cache","_createElementVNode"],"mappings":"oRAKA,MAAqBA,EAArB,MAAqBA,CAAO,CAexB,YAAYC,EAAwB,CAX5BC,EAAA,cACAA,EAAA,cAAS,KAWT,OAAOD,GAAS,SAEhB,KAAK,MAAQ,KAAK,SAASA,CAAI,EACxB,OAAOA,GAAS,SAEvB,KAAK,MAAQ,KAAK,YAAYA,CAAI,EAGlC,KAAK,MAAQ,KAAK,YACdD,EAAO,IACH,KAAK,OAAOA,EAAO,IAAMA,EAAO,KAAO,KAAK,OAAA,CAAQ,CAAA,EAGhE,KAAK,MAAA,CAAM,CAaR,KAAKG,EAAM,EAAGC,EAAY,EAAW,CACxC,YAAK,YAAA,EACE,KAAK,IAAI,KAAK,OAAQJ,EAAO,IAAKA,EAAO,IAAKG,EAAKC,CAAS,CAAA,CAUhE,QAAQD,EAAM,GAAIE,EAAM,IAAa,CACxC,YAAK,YAAA,EACE,KAAK,MACR,KAAK,IAAI,KAAK,OAAQL,EAAO,IAAKA,EAAO,IAAKG,EAAKE,EAAM,CAAC,CAAA,CAC9D,CAcG,WACHC,EAAS,GACTC,EAAQ,iEACF,CACN,IAAIC,EAAM,GACV,KAAOA,EAAI,OAASF,GAChBE,GAAO,KAAK,SAASD,CAAK,EAE9B,OAAOC,CAAA,CASJ,SACHD,EAAQ,iEACF,CACN,OAAOA,EAAM,OAAO,KAAK,QAAQ,EAAGA,EAAM,OAAS,CAAC,EAAG,CAAC,CAAA,CAcrD,cAAiBE,EAAe,CACnC,OAAOA,EAAM,KAAK,QAAQ,EAAGA,EAAM,OAAS,CAAC,CAAC,CAAA,CAQ3C,aAAuB,CAC1B,YAAK,YAAA,EACE,KAAK,OAAS,EAAA,CAUlB,KAAKC,EAAa,EAAS,CAC9B,KAAOA,KAAe,GAClB,KAAK,YAAA,CACT,CAgBG,OAAc,CACjB,KAAK,OAAS,KAAK,KAAA,CAMf,aAAoB,CACxB,KAAK,OAAS,KAAK,SAAS,KAAK,MAAM,CAAA,CAGnC,SAASC,EAAuB,CAGpC,OAAAA,GAASA,GAAS,GAClBA,GAASA,GAAS,GAClBA,GAASA,GAAS,EACXA,CAAA,CAGH,IACJC,EACAC,EACAC,EACAC,EACAC,EACM,CACN,OACMJ,EAAMC,IAAYC,EAAUD,IAAaG,EAAQD,GAASA,CAAA,CAI5D,SAASP,EAAqB,CAClC,IAAIS,EAAO,EACX,GAAIT,EAAK,CACL,MAAMU,EAAIV,EAAI,OACd,QAASW,EAAI,EAAGA,EAAID,EAAGC,IACnBF,GAAQA,GAAQ,GAAKA,EAAOT,EAAI,WAAWW,CAAC,EAC5CF,GAAQ,EACRA,EAAO,KAAK,SAASA,CAAI,CAC7B,CAEJ,OAAO,KAAK,YAAYA,CAAI,CAAA,CAGxB,YAAYhB,EAAsB,CACtC,OAAIA,IAAS,EAAU,EAChBA,CAAA,CAEf,EAlMIC,EADiBF,EACO,MAAc,aACtCE,EAFiBF,EAEO,MAAc,YAF1C,IAAqBoB,EAArBpB,ECHO,MAAMqB,EAAS,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACJ,EAEO,SAASC,GAAiB,CAC7B,OAAOD,EAAO,KAAK,MAAM,KAAK,SAAWA,EAAO,MAAM,CAAC,CAC3D,CAEO,SAASE,EAAuBtB,EAAc,CAEjD,MAAMuB,EADe,IAAIJ,EAAOnB,CAAI,EACT,QAAQ,EAAGoB,EAAO,OAAS,CAAC,EACvD,OAAOA,EAAOG,CAAK,CACvB,eC7BS,QAAQ,WAAW,KAAK,OAAO,MAAM,8CAA1C,OAAAC,EAAA,EAAAC,EAOM,MAPNC,EAOMC,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,CANFC,EAK8B,OAAA,CAJ1B,EAAE,gPACF,OAAO,eACP,eAAa,MACb,iBAAe,QACf,kBAAgB"}