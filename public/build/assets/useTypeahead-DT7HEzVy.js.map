{"version":3,"file":"useTypeahead-DT7HEzVy.js","sources":["../../../node_modules/reka-ui/dist/shared/useTypeahead.js"],"sourcesContent":["import { refAutoReset } from '@vueuse/shared';\nimport { g as getActiveElement } from './getActiveElement.js';\n\nfunction useTypeahead(callback) {\n  const search = refAutoReset(\"\", 1e3);\n  const handleTypeaheadSearch = (key, items) => {\n    search.value = search.value + key;\n    {\n      const currentItem = getActiveElement();\n      const itemsWithTextValue = items.map((item) => ({\n        ...item,\n        textValue: item.value?.textValue ?? item.ref.textContent?.trim() ?? \"\"\n      }));\n      const currentMatch = itemsWithTextValue.find((item) => item.ref === currentItem);\n      const values = itemsWithTextValue.map((item) => item.textValue);\n      const nextMatch = getNextMatch(values, search.value, currentMatch?.textValue);\n      const newItem = itemsWithTextValue.find((item) => item.textValue === nextMatch);\n      if (newItem)\n        newItem.ref.focus();\n      return newItem?.ref;\n    }\n  };\n  const resetTypeahead = () => {\n    search.value = \"\";\n  };\n  return {\n    search,\n    handleTypeaheadSearch,\n    resetTypeahead\n  };\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nfunction getNextMatch(values, search, currentMatch) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;\n  let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));\n  const excludeCurrentMatch = normalizedSearch.length === 1;\n  if (excludeCurrentMatch)\n    wrappedValues = wrappedValues.filter((v) => v !== currentMatch);\n  const nextMatch = wrappedValues.find(\n    (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextMatch !== currentMatch ? nextMatch : void 0;\n}\n\nexport { getNextMatch as g, useTypeahead as u, wrapArray as w };\n//# sourceMappingURL=useTypeahead.js.map\n"],"names":["useTypeahead","callback","search","refAutoReset","key","items","currentItem","getActiveElement","itemsWithTextValue","item","_a","_b","currentMatch","values","nextMatch","getNextMatch","newItem","wrapArray","array","startIndex","_","index","normalizedSearch","char","currentMatchIndex","wrappedValues","v","value"],"mappings":"gFAGA,SAASA,EAAaC,EAAU,CAC9B,MAAMC,EAASC,EAAa,GAAI,GAAG,EAqBnC,MAAO,CACL,OAAAD,EACA,sBAtB4B,CAACE,EAAKC,IAAU,CAC5CH,EAAO,MAAQA,EAAO,MAAQE,EAC9B,CACE,MAAME,EAAcC,EAAgB,EAC9BC,EAAqBH,EAAM,IAAKI,GAAI,SAAM,OAC9C,GAAGA,EACH,YAAWC,EAAAD,EAAK,QAAL,YAAAC,EAAY,cAAaC,EAAAF,EAAK,IAAI,cAAT,YAAAE,EAAsB,SAAU,EAC5E,EAAQ,EACIC,EAAeJ,EAAmB,KAAMC,GAASA,EAAK,MAAQH,CAAW,EACzEO,EAASL,EAAmB,IAAKC,GAASA,EAAK,SAAS,EACxDK,EAAYC,EAAaF,EAAQX,EAAO,MAAOU,GAAA,YAAAA,EAAc,SAAS,EACtEI,EAAUR,EAAmB,KAAMC,GAASA,EAAK,YAAcK,CAAS,EAC9E,OAAIE,GACFA,EAAQ,IAAI,MAAK,EACZA,GAAA,YAAAA,EAAS,GACtB,CACA,EAOI,eANqB,IAAM,CAC3Bd,EAAO,MAAQ,EACnB,CAKA,CACA,CACA,SAASe,EAAUC,EAAOC,EAAY,CACpC,OAAOD,EAAM,IAAI,CAACE,EAAGC,IAAUH,GAAOC,EAAaE,GAASH,EAAM,MAAM,CAAC,CAC3E,CACA,SAASH,EAAaF,EAAQX,EAAQU,EAAc,CAElD,MAAMU,EADapB,EAAO,OAAS,GAAK,MAAM,KAAKA,CAAM,EAAE,MAAOqB,GAASA,IAASrB,EAAO,CAAC,CAAC,EACvDA,EAAO,CAAC,EAAIA,EAC5CsB,EAAoBZ,EAAeC,EAAO,QAAQD,CAAY,EAAI,GACxE,IAAIa,EAAgBR,EAAUJ,EAAQ,KAAK,IAAIW,EAAmB,CAAC,CAAC,EACxCF,EAAiB,SAAW,IAEtDG,EAAgBA,EAAc,OAAQC,GAAMA,IAAMd,CAAY,GAChE,MAAME,EAAYW,EAAc,KAC7BE,GAAUA,EAAM,YAAW,EAAG,WAAWL,EAAiB,YAAW,CAAE,CAC5E,EACE,OAAOR,IAAcF,EAAeE,EAAY,MAClD","x_google_ignoreList":[0]}