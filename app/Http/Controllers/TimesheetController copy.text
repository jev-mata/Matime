 
<?php 
namespace App\Http\Controllers;


use App\Models\Organization;
use App\Models\Tag;
use App\Models\Teams;
use App\Models\TimeEntry;
use App\Models\User;
use App\Models\Timesheet;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Inertia\Inertia;

class TimesheetController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $date = $request->get('date');
        $date = Carbon::createFromFormat('m-d-Y', $date);
        $period = $this->getBimonthlyPeriod(Carbon::parse($date));
        $range = $this->getBimonthlyRange(Carbon::parse($date));
        Log::info($period);
        $entries = TimeEntry::with(['project', 'task'])->where('user_id', auth()->id())
            ->whereBetween('start', [$range['from'], $range['to']])
            ->get();

        $grouped = $entries->map(function ($entry) {
            return [
                'id' => $entry->id,
                'date' => $entry->start?->format('Y-m-d'), // Grouping key
                'start' => $entry->start?->toDateTimeString(),
                'end' => $entry->end?->toDateTimeString(),
                'tags' => $entry->tags,
                'task' => $entry->task,
                'project' => $entry->project,
                'hours' => optional($entry->getDuration()),
                'description' => $entry->description,
                'status' => 'Pending',
            ];
        })->groupBy('date')->map->values(); // Reset keys inside each group

        // Total duration
        $totalSeconds = $entries->reduce(function ($carry, $entry) {
            return $carry + optional($entry->getDuration())?->totalSeconds ?? 0;
        }, 0);

        $hours = floor($totalSeconds / 3600);
        $minutes = floor(($totalSeconds % 3600) / 60);
        $totalFormatted = sprintf('%dh %02dm', $hours, $minutes);

        Log::info($grouped);
        return Inertia::render('Timesheet::index', [
            'entries' => $grouped,
            'totalHours' => $totalFormatted,
            'totalHoursNotForm' => $hours . '.' . $minutes,
            'period' => $range,
            'isSubmit' => false,
            'isApproved' => false
        ]);
    }
    public function SubmitView(Request $request)
    {
        $date = $request->get('date');
        $date = Carbon::createFromFormat('m-d-Y', $date);
        $period = $this->getBimonthlyPeriod(Carbon::parse($date));
        $range = $this->getBimonthlyRange(Carbon::parse($date));
        Log::info($period);
        $entries = TimeEntry::with(['project', 'task'])->where('user_id', auth()->id())
            ->whereBetween('start', [$range['from'], $range['to']])
            ->get();

        $grouped = $entries->map(function ($entry) {
            return [
                'id' => $entry->id,
                'date' => $entry->start?->format('Y-m-d'), // Grouping key
                'start' => $entry->start?->toDateTimeString(),
                'end' => $entry->end?->toDateTimeString(),
                'tags' => $entry->tags,
                'task' => $entry->task,
                'project' => $entry->project,
                'hours' => optional($entry->getDuration()),
                'description' => $entry->description,
                'status' => 'Pending',
            ];
        })->groupBy('date')->map->values(); // Reset keys inside each group

        // Total duration
        $totalSeconds = $entries->reduce(function ($carry, $entry) {
            return $carry + optional($entry->getDuration())?->totalSeconds ?? 0;
        }, 0);

        $hours = floor($totalSeconds / 3600);
        $minutes = floor(($totalSeconds % 3600) / 60);
        $totalFormatted = sprintf('%dh %02dm', $hours, $minutes);

        Log::info($grouped);
        // return Inertia::render('Approval/approval', [
        //     'entries' => $grouped,
        //     'totalHours' => $totalFormatted,
        //     'totalHoursNotForm' => $hours . '.' . $minutes,
        //     'period' => $range,
        //     'isSubmit' => false,
        //     'isApproved' => false
        // ]);
        return response()->json([
            'entries' => $grouped,
            'totalHours' => $totalFormatted,
            'totalHoursNotForm' => $hours . '.' . $minutes,
            'period' => $range,
            'isSubmit' => false,
            'isApproved' => false,
        ]);

    }
    public function permission()
    {
        $org = $this->currentOrganization();
        $mem = $this->member($org);
        $isManager = $mem->role !== 'employee';
        Log::info($mem);
        Log::info($isManager);

        return response()->json(
            $isManager
        );
    }
    public function unSubmitView(Request $request)
    {
        $date = $request->get('date');
        $date = Carbon::createFromFormat('m-d-Y', $date);
        $period = $this->getBimonthlyPeriod(Carbon::parse($date));
        $range = $this->getBimonthlyRange(Carbon::parse($date));

        $entries = TimeEntry::with(['project', 'task'])->where('user_id', auth()->id())
            ->whereBetween('start', [$range['from'], $range['to']])
            ->get();
        $grouped = $entries->map(function ($entry) {
            return [
                'id' => $entry->id,
                'date' => $entry->start?->format('Y-m-d'), // Grouping key
                'start' => $entry->start?->toDateTimeString(),
                'end' => $entry->end?->toDateTimeString(),
                'tags' => Tag::find($entry->tags),
                'project' => $entry->project,
                'task' => $entry->task,
                'hours' => optional($entry->getDuration()),
                'description' => $entry->description,
                'status' => 'Pending',
            ];
        })->groupBy('date')->map->values(); // Reset keys inside each group

        // Total duration
        $totalSeconds = $entries->reduce(function ($carry, $entry) {
            return $carry + optional($entry->getDuration())?->totalSeconds ?? 0;
        }, 0);

        $hours = floor($totalSeconds / 3600);
        $minutes = floor(($totalSeconds % 3600) / 60);
        $totalFormatted = sprintf('%dh %02dm', $hours, $minutes);
        $currentTimesheet = TimeEntry::whereBetween('start', [$range['from'], $range['to']])->where('user_id', '=', Auth::user()->id)->get();
        // $currentTimesheet = Timesheet::whereBetween('date_start', [$range['from'], $range['to']])->get()->first();
        Log::info($grouped);
        // return Inertia::render('Timesheet::index', [
        //     'entries' => $grouped,
        //     'totalHours' => $totalFormatted,
        //     'totalHoursNotForm' => $hours . '.' . $minutes,
        //     'period' => $range,
        //     'isSubmit' => true,
        //     'isApproved' => !is_null($currentTimesheet->approved_by)
        // ]);

        return response()->json([
            'entries' => $grouped,
            'totalHours' => $totalFormatted,
            'totalHoursNotForm' => $hours . '.' . $minutes,
            'period' => $range,
            'isSubmit' => false,
            'isApproved' => false,
        ]);
    }

    private function getBimonthlyRange(Carbon $date): array
    {
        $timezone = Auth::user()->timezone;
        // $timezone = DB::select("SHOW TIMEZONE")[0]->TimeZone ?? 'UTC';


        if ($date->day <= 15) {
            $from = $date->copy()->startOfMonth()->startOfDay();             // 1st day
            $to = $date->copy()->startOfMonth()->addDays(14)->endOfDay();    // 15th day
        } else {
            $from = $date->copy()->startOfMonth()->addDays(15)->startOfDay(); // 16th
            $to = $date->copy()->endOfMonth()->startOfDay();                    // end of month (30th or 31st)
        }
        Log::info($timezone);
        Log::info($date);
        Log::info($from->setTimezone($timezone)->format('Y-m-d'));
        Log::info($to->format('Y-m-d'));
        return [
            'from' => $from->setTimezone($timezone)->format('Y-m-d'),
            'to' => $to->setTimezone($timezone)->format('Y-m-d'),
        ];
    }
    public function getBimonthlyPeriod(Carbon $date)
    {
        return $date->day <= 15
            ? $date->format('Y-m') . '-1' // 1st half
            : $date->format('Y-m') . '-2'; // 2nd half
    }
    public function store(Request $request)
    {
        try {
            Log::info($request);
            $data = $request->validate([
                'date_start' => 'required|date',
                'date_end' => 'required|date',
                'hours' => 'required|numeric|min:0.25', // assuming hours are required too
            ]);


            $data['user_id'] = Auth::user()->id;
            $data['status'] = 'pending';

            // Calculate bimonthly period
            // if ($date->day <= 15) {
            //     $data['date'] = $date->format('Y-m') . '-1';  // 1st half
            // } else {
            //     $data['date'] = $date->format('Y-m') . '-2';  // 2nd half
            // }

            $timesheets = TimeEntry::whereBetween('start', $data['date_start'], $data['date_end'])->where('user_id', '=', $data['user_id'])->get();
            foreach ($timesheets as $time) {
                $time['Approval'] = 'submitted';
                $time->save();
            }
            return response()->json([
                'message' => 'Timesheet entry created successfully.',
            ], 201);
        } catch (\Throwable $e) {
            \Log::error('Timesheet store error', ['error' => $e->getMessage()]);

            return response()->json([
                'message' => 'Failed to create timesheet entry.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    public function destroy(Request $request)
    {
        try {
            $data = $request->validate([
                'date_start' => 'required|date',
                'date_end' => 'required|date',
            ]);

            $userId = Auth::id();
            $targetDate = $data['date'];

            $timesheets = TimeEntry::whereBetween('start', $data['date_start'], $data['date_end'])->where('user_id', '=', $userId)->get();
            foreach ($timesheets as $time) {
                $time['Approval'] = 'unsubmitted';
                $time->save();
            }

            return response()->json([
                'message' => 'Timesheet unsubmitted successfully.',
            ], 201);
        } catch (\Throwable $e) {
            \Log::error('Timesheet store error', ['error' => $e->getMessage()]);

            return response()->json([
                'message' => 'Failed to create timesheet entry.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
    public function approve(Request $request)
    {

        $data = $request->validate([
            'userId' => 'required|array',
            'date_start' => 'required|date',
            'date_end' => 'required|date',
        ]);

        $timesheets = TimeEntry::whereBetween('start', $data['date_start'], $data['date_end'])->where('user_id', '=', $data['userId'])->get();
        foreach ($timesheets as $time) {
            $time['Approval'] = 'approved';
            $time['Approved_by'] = Auth::user()->id;
            $time->save();
        }


        return response()->json(['message' => 'Approved']);
    }

    public function approval(Request $request)
    {
        $data = $request->validate([
            'userId' => 'required|array',
            'date_start' => 'required|date',
            'date_end' => 'required|date',
        ]);


        $teamIds = Auth::user()->groups()->pluck('teams.id');
        // $groups = $user->groups()->with('users')->get();  
        // $users = User::whereIn('id', $userIds)->with('Timesheets')->get();
        $timesheets = TimeEntry::whereBetween('start', $data['date_start'], $data['date_end'])->with('user.groups')->get();

        $grouped = $timesheets->groupBy('date_start');
        Log::info($timesheets);

        return Inertia::render('Timesheet/index', [
            'timesheets' => $grouped
        ]);
    }



    public function approvalSelected(Request $request)
    {
        $data = $request->validate([
            'userId' => 'required|array', 
        ]);
        $user = Auth::user();
        $organization = $user->currentOrganization;
        $groups = $user->groups();

        // Get all user IDs in the organization
        $userIds = $organization->users()->pluck('users.id');

        $entries = TimeEntry::with(['project', 'task'])->whereIn('user_id', $userIds)
            ->get();


        /////////////////////////



        $grouped = $entries->map(function ($entry) {
            return [
                'id' => $entry->id,
                'date' => $entry->start?->format('Y-m-d'), // Grouping key
                'start' => $entry->start?->toDateTimeString(),
                'end' => $entry->end?->toDateTimeString(),
                'tags' => Tag::find($entry->tags),
                'project' => $entry->project,
                'task' => $entry->task,
                'hours' => optional($entry->getDuration()),
                'description' => $entry->description,
                'status' => 'Pending',
            ];


        })->groupBy('date')->map->values(); // Reset keys inside each group


        // Total duration
        $totalSeconds = $entries->reduce(function ($carry, $entry) {
            return $carry + optional($entry->getDuration())?->totalSeconds ?? 0;
        }, 0);

        $hours = floor($totalSeconds / 3600);
        $minutes = floor(($totalSeconds % 3600) / 60);
        $totalFormatted = sprintf('%dh %02dm', $hours, $minutes);
        return Inertia::render('Approval/approval', [
            'entries' => $grouped,
            'totalHours' => $totalFormatted,
            'totalHoursNotForm' => $hours . '.' . $minutes,
            'isSubmit' => true,
            'timesheet' => $timesheet,
            'groups' => $groups
        ]);
    }




    public function reject($id)
    {
        $timesheet = Timesheet::findOrFail($id);
        $timesheet->update([
            'status' => 'rejected',
            'approved_by' => auth()->id(),
            'approved_at' => now(),
        ]);
        return response()->json(['message' => 'Rejected']);
    }


    /**
     * Store a newly created resource in storage.
     */

    /**
     * Show the specified resource.
     */
    public function show(Request $request)
    {
        $date = $request->get('date');
        $range = $this->getBimonthlyRange(Carbon::parse($date));

        $entries = TimeEntry::where('user_id', auth()->id())
            ->whereBetween('start', [$range['from'], $range['to']])
            ->get();
        return response()->json([
            'isSubmitted' => $entries,
        ]);
    }
 
    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        return view('timesheet::edit');
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
}
